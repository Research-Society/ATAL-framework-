import torch.nn.functional as F

class GradCAM:
    def __init__(self, model):
        self.model = model
        self.gradients = None
        self.activations = None
        
    def save_gradients(self, grad):
        self.gradients = grad

    def save_activations(self, activation):
        self.activations = activation
        
    def hook_layers(self):
        # Hook the last convolutional layer for activations and gradients
        for name, module in self.model.named_modules():
            if isinstance(module, nn.Conv2d):
                module.register_forward_hook(self.save_activations)
                module.register_backward_hook(self.save_gradients)
    
    def generate_heatmap(self):
        # Compute the Grad-CAM heatmap
        pooled_gradients = torch.mean(self.gradients, dim=[0, 2, 3], keepdim=True)
        weighted_activations = self.activations * pooled_gradients
        heatmap = torch.mean(weighted_activations, dim=1).squeeze()
        heatmap = F.relu(heatmap)
        heatmap = F.interpolate(heatmap.unsqueeze(0), size=(224, 224), mode='bilinear', align_corners=False)
        return heatmap.squeeze().cpu().detach().numpy()
